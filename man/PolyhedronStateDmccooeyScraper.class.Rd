% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/polyhedra-lib.R
\docType{class}
\name{PolyhedronStateDmccooeyScraper.class}
\alias{PolyhedronStateDmccooeyScraper.class}
\title{Polyhedron State Dmccooey Scraper}
\format{\code{\link{R6Class}} object.}
\description{
Polyhedron State Dmccooey Scraper

Polyhedron State Dmccooey Scraper
}
\details{
Scrapes polyhedra from a dmccooey file format
}
\section{Methods}{

\describe{
  \item{\code{initialize(file.id, netlib.p3.lines)}}{Initializes
  the object, taking the file.id and PDH file as parameters}
  \item{\code{scrape()}}{Scrapes data from dmccooey file format}
  \item{\code{getName()}}{returns polyhedron name}
  \item{\code{scrapeValues(values.lines)}}{Scrapes values}
  \item{\code{scrapeVertices(vertices.lines)}}{Scrapes vertices}
  \item{\code{scrapeFaces(faces.lines)}}{Scrapes faces}
  \item{\code{applyTransformationMatrix(transformation.matrix)}}{Apply
  transformation matrix to polyhedron}
  \item{\code{buildRGL(transformation.matrix)}}{Builds the \code{RGL} model}
}
}

\section{Super class}{
\code{\link[Rpolyhedra:PolyhedronState]{Rpolyhedra::PolyhedronState}} -> \code{PolyhedronStateDmccooeyScraper}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{regexp.values.names}}{regexp for scraping values names}

\item{\code{regexp.rn}}{regexp for scraping real numbers}

\item{\code{regexp.values}}{regexp for scraping values}

\item{\code{regexp.vertex}}{regexp for scraping vertices}

\item{\code{regexp.faces}}{regexp for scraping faces}

\item{\code{polyhedra.dmccooey.lines}}{dmccooey polyhedra definition lines}

\item{\code{labels.map}}{labels map where values are}

\item{\code{values}}{labels map where values are}

\item{\code{vertices}}{specification}

\item{\code{vertices.replaced}}{3D values}

\item{\code{faces}}{definition}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{PolyhedronStateDmccooeyScraper.class$new()}}
\item \href{#method-setupRegexp}{\code{PolyhedronStateDmccooeyScraper.class$setupRegexp()}}
\item \href{#method-scrapeValues}{\code{PolyhedronStateDmccooeyScraper.class$scrapeValues()}}
\item \href{#method-scrapeVertices}{\code{PolyhedronStateDmccooeyScraper.class$scrapeVertices()}}
\item \href{#method-scrapeFaces}{\code{PolyhedronStateDmccooeyScraper.class$scrapeFaces()}}
\item \href{#method-scrape}{\code{PolyhedronStateDmccooeyScraper.class$scrape()}}
\item \href{#method-getName}{\code{PolyhedronStateDmccooeyScraper.class$getName()}}
\item \href{#method-applyTransformationMatrix}{\code{PolyhedronStateDmccooeyScraper.class$applyTransformationMatrix()}}
\item \href{#method-buildRGL}{\code{PolyhedronStateDmccooeyScraper.class$buildRGL()}}
\item \href{#method-exportToXML}{\code{PolyhedronStateDmccooeyScraper.class$exportToXML()}}
\item \href{#method-clone}{\code{PolyhedronStateDmccooeyScraper.class$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="Rpolyhedra" data-topic="PolyhedronState" data-id="addError">}\href{../../Rpolyhedra/html/PolyhedronState.html#method-addError}{\code{Rpolyhedra::PolyhedronState$addError()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="Rpolyhedra" data-topic="PolyhedronState" data-id="checkEdgesConsistency">}\href{../../Rpolyhedra/html/PolyhedronState.html#method-checkEdgesConsistency}{\code{Rpolyhedra::PolyhedronState$checkEdgesConsistency()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="Rpolyhedra" data-topic="PolyhedronState" data-id="getSolid">}\href{../../Rpolyhedra/html/PolyhedronState.html#method-getSolid}{\code{Rpolyhedra::PolyhedronState$getSolid()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
Initialize Dmccooey scraper
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PolyhedronStateDmccooeyScraper.class$new(file.id, polyhedra.dmccooey.lines)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file.id}}{identifier of the definition file.}

\item{\code{polyhedra.dmccooey.lines}}{raw Dmccooey definition file lines}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new  `PolyhedronStateDmccooeyScraper` object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-setupRegexp"></a>}}
\subsection{Method \code{setupRegexp()}}{
setupRegexp for Dmccooey definition
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PolyhedronStateDmccooeyScraper.class$setupRegexp()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
This `PolyhedronStateDmccooeyScraper` object with regexp defined.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-scrapeValues"></a>}}
\subsection{Method \code{scrapeValues()}}{
scrape values from Dmccooey definition
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PolyhedronStateDmccooeyScraper.class$scrapeValues(values.lines)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{values.lines}}{values definitions in Dmccooey source}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
This `PolyhedronStateDmccooeyScraper` object with values defined.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-scrapeVertices"></a>}}
\subsection{Method \code{scrapeVertices()}}{
scrape polyhedron vertices from definition
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PolyhedronStateDmccooeyScraper.class$scrapeVertices(vertices.lines)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{vertices.lines}}{vertices definitions in Dmccooey source}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
This `PolyhedronStateDmccooeyScraper` object with faces defined.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-scrapeFaces"></a>}}
\subsection{Method \code{scrapeFaces()}}{
scrape polyhedron faces from definition
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PolyhedronStateDmccooeyScraper.class$scrapeFaces(faces.lines)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{faces.lines}}{face}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
This `PolyhedronStateDmccooeyScraper` object with faces defined.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-scrape"></a>}}
\subsection{Method \code{scrape()}}{
scrape polyhedron
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PolyhedronStateDmccooeyScraper.class$scrape()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A new `PolyhedronStateDefined` object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getName"></a>}}
\subsection{Method \code{getName()}}{
get Polyhedron name
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PolyhedronStateDmccooeyScraper.class$getName()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
string with polyhedron name
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-applyTransformationMatrix"></a>}}
\subsection{Method \code{applyTransformationMatrix()}}{
Apply transformation matrix to polyhedron
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PolyhedronStateDmccooeyScraper.class$applyTransformationMatrix(
  transformation.matrix
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{transformation.matrix}}{the transformation matrix to apply to the polyhedron}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-buildRGL"></a>}}
\subsection{Method \code{buildRGL()}}{
Creates a RGL representation of the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PolyhedronStateDmccooeyScraper.class$buildRGL(transformation.matrix)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{transformation.matrix}}{the transformation matrix to apply to the polyhedron}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-exportToXML"></a>}}
\subsection{Method \code{exportToXML()}}{
serializes object in XML
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PolyhedronStateDmccooeyScraper.class$exportToXML()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PolyhedronStateDmccooeyScraper.class$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
