% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/polyhedra-lib.R
\docType{class}
\name{Polyhedron.class}
\alias{Polyhedron.class}
\title{Polyhedron}
\format{\code{\link{R6Class}} object.}
\description{
Polyhedron

Polyhedron
}
\details{
Polyhedron container class, which is accesible by the final users upon call
to \code{getPolyhedron()}
}
\section{Methods}{

\describe{
  \item{\code{initialize(file.id, state = NULL)}}{Initializes the object}
  \item{\code{scrapeNetlib(polyhedron.lines)}}{{Scrapes polyhedra from
  the netlib definition}}
  \item{\code{scrapeDmccooey(polyhedra.dmccooey.lines)}}{{Scrapes polyhedra
   from the dmccooey definition}}
  \item{\code{deserialize(polyhedron.serialized)}}{{Deserialize polyhedron
   from definition}}
  \item{\code{getName()}}{Gets the name from polyhedron definition}
  \item{\code{getState()}}{Gets the state from polyhedron definition}
  \item{\code{getSolid()}}{Gets the solid definition of polyhedron
  definition}
  \item{\code{isChecked()}}{Returns TRUE is polyhedron is checked}
  \item{\code{getErrors()}}{Returns errors collected in checking process}
  \item{\code{getRGLModel(transformation.matrix)}}{Builds the RGL model}
  \item{\code{exportToXML()}}{Gets an XML representation out of the
  polyhedron object}
  \item{\code{checkProperties(expected.vertices,
  expected.faces)}}{check polyhedron basic properties}

}
}

\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{file.id}}{Polyhedron file.id}

\item{\code{state}}{Polyhedron state}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Polyhedron.class$new()}}
\item \href{#method-scrapeNetlib}{\code{Polyhedron.class$scrapeNetlib()}}
\item \href{#method-scrapeDmccooey}{\code{Polyhedron.class$scrapeDmccooey()}}
\item \href{#method-deserialize}{\code{Polyhedron.class$deserialize()}}
\item \href{#method-getName}{\code{Polyhedron.class$getName()}}
\item \href{#method-getState}{\code{Polyhedron.class$getState()}}
\item \href{#method-getSolid}{\code{Polyhedron.class$getSolid()}}
\item \href{#method-isChecked}{\code{Polyhedron.class$isChecked()}}
\item \href{#method-getRGLModel}{\code{Polyhedron.class$getRGLModel()}}
\item \href{#method-exportToXML}{\code{Polyhedron.class$exportToXML()}}
\item \href{#method-getErrors}{\code{Polyhedron.class$getErrors()}}
\item \href{#method-checkProperties}{\code{Polyhedron.class$checkProperties()}}
\item \href{#method-clone}{\code{Polyhedron.class$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
Create a polyhedronState object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Polyhedron.class$new(file.id, state = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{file.id}}{the file id}

\item{\code{state}}{polyhedron state object}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new  `Polyhedron` object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-scrapeNetlib"></a>}}
\subsection{Method \code{scrapeNetlib()}}{
scrape Netlib polyhedron definition
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Polyhedron.class$scrapeNetlib(netlib.p3.lines)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{netlib.p3.lines}}{vector with netlib definition lines}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new  `PolyhedronStateDefined` object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-scrapeDmccooey"></a>}}
\subsection{Method \code{scrapeDmccooey()}}{
scrape Dmccooey polyhedron definition
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Polyhedron.class$scrapeDmccooey(polyhedra.dmccooey.lines)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{polyhedra.dmccooey.lines}}{vector with Dmccooey definition lines}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new  `PolyhedronStateDefined` object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-deserialize"></a>}}
\subsection{Method \code{deserialize()}}{
deserialize a polyhedron state definition
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Polyhedron.class$deserialize(serialized.polyhedron)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{serialized.polyhedron}}{a seralized version of a polyhedron state}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new  `PolyhedronStateDefined` object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getName"></a>}}
\subsection{Method \code{getName()}}{
get Polyhedron name
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Polyhedron.class$getName()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
string with polyhedron name
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getState"></a>}}
\subsection{Method \code{getState()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Polyhedron.class$getState()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getSolid"></a>}}
\subsection{Method \code{getSolid()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Polyhedron.class$getSolid()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-isChecked"></a>}}
\subsection{Method \code{isChecked()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Polyhedron.class$isChecked()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getRGLModel"></a>}}
\subsection{Method \code{getRGLModel()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Polyhedron.class$getRGLModel(transformation.matrix = NULL)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-exportToXML"></a>}}
\subsection{Method \code{exportToXML()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Polyhedron.class$exportToXML()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getErrors"></a>}}
\subsection{Method \code{getErrors()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Polyhedron.class$getErrors()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-checkProperties"></a>}}
\subsection{Method \code{checkProperties()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Polyhedron.class$checkProperties(expected.vertices, expected.faces)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Polyhedron.class$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
